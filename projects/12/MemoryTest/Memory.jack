// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int free;
    static Array mem;

    /** Initializes the class. */
    function void init() {
        let mem = 0;
        let free = 2048;                  // base
        let mem[free] = 16384 - free - 1; // size
        let mem[free + 1] = 0;            // next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, previous;
        let block = free;
        let previous = 0;
        while (block[0] < size + 1) {
            let previous = block; // retain a pointer to the previous block
            let block = block[1];
        }
        if (block[0] - size > 2) {
            // handle the case were we can carve off an existing section
            let block[0] = (block[0] - size) - 1;
            let block = block + block[0];
            let block[0] = size + 1;
            return block;
        } else {
            if (previous = 0) {
                let free = block[1];
            } else {
                let previous[1] = block[1];
            }
            return block;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        /* Here we just prepend since it is O(1), we could instead
         * maintain a pointer to the last element in free to make
         * appending O(1) instead of O(n) but doing it this away
         * avoids the need for that additional reference */
        var int size, next;
        let size = o[-1];
        let next = free;
        let free = o - 1;
        let free[1] = next;
        return;
    }    
}
